# Dependencies
import streamlit as st
import pandas as pd
from inform import Descriptions

def display_input_rewards_actions():

    """
    display_input_rewards_actions() is responsable for 
    defining the transitional rewards.
    """

    st.title('Transitional Rewards')
    st.markdown('---')
  
    c1, c2 = st.columns((2, 1))
    c1.header('Input')

    c2.header('Description')
    c2.info(Descriptions.REWARD_ABOUT)
    c2.error(Descriptions.REWARD_INPUT)
    c2.success(Descriptions.REWARD_OUTPUT)

    # Option to decide whether or not to use data generated by us
    data_options = ['Import own data', 'Use data collected by authors']
    option = c1.radio('Which data would you like the model to consider?', data_options)
    
    if (option == data_options[0]):

        # Upload Transition File
        upload = c1.file_uploader("Upload Dataframe", type=["csv"], key='reward_data')

        if (upload is not None):
            data = pd.read_csv(upload).iloc[: , 1:]

            # Visualize Data
            st.markdown('---')
            st.markdown('## Display Input')
            display_data(data)
        
            st.markdown('---')
            st.markdown('## Additional Inputs: Cost of Actions Data & Reward Factor')
            reward_factor = st.slider("Reward Factor", min_value=0.01, 
                                                        max_value = 1.0,
                                                        value = 0.5, 
                                                        help="Default reaward value set to 50%.")

            # Input Cost of Actions
            cost_actions_upload = st.file_uploader("Upload the data containing cost of actions", type=["csv"], key='action_cost', help = 'Insert the .csv file containing a column with (Action Type) and a column with (Action Cost).')

            if (cost_actions_upload is not None):
                st.markdown('---')
                cost_actions = pd.read_csv(cost_actions_upload)
                # st.write(cost_actions)

                c3, c4 = st.columns([2, 1])

                # DELTA CLV & REWARDS
                c3.markdown('## Delta CLV & Reward Calculation')
                state = c3.selectbox("Which column in the data input corresponds to the state column (S)?", data.columns, help = 'Pick the column (State) in your data set!')
                follow_up_state = c3.selectbox("Which column in the data input corresponds to the follow_up_state column (S')", data.columns, help = "Pick the column (Follow Up State) in your data set!")

                c4.markdown('## Tipp')
                c4.info("Here it is important that the user chooses the columns regarding the categories of states, actions and follow-up states. Hence, (S,A,S') is a Triple of Categories, (states_category, action_category, follow_up_category), and not the actual (state, actions, follow-up state).")

                data = pd.merge(data, cost_actions, on = 'action', how = 'outer')
                # st.markdown('Action Cost Incurred')
                # st.write(data)
                data['cost'] = data['cost'].astype(float)

                # MDP Form
                data["state_category"] = data["state"].astype('category').cat.codes
                data["state_category"].astype('int')

                data["action_category"] = data["action"].astype('category').cat.codes
                data["action_category"].astype('int')

                data["follow_up_state_category"] = data["follow_up_state"].astype('category').cat.codes
                data["follow_up_state_category"].astype('int')

                tuple_cols_target = c3.multiselect("Select all columns (S,A,S') Category that should be transformed into a single Triple", data.columns, key="tripler_reward", help = "Hint: Here (S,A,S') refers to the categories. E.g. (state_category, action_category, follow_up_state_category)")

                if c3.button('Calculate Rewards & Get MDP Input'):
                    data["Delta CLV"] = data[follow_up_state] - data[state]
                    data['cost'] = pd.to_numeric(data['cost'])
                    data['Reward (state, action, follow_up_state)'] = reward_factor * data["Delta CLV"] - (1 - reward_factor) * data["cost"]
                    data = data.sort_values(['state_category', 'action_category', 'follow_up_state_category'])

                    if (len(tuple_cols_target) == 3):

                        st.write('## MDP Frame Input')
                
                        data['Triple'] = data[tuple_cols_target].apply(tuple, axis = 1)
                        simplified = data.filter(['Triple','Reward (state, action, follow_up_state)', 'cost'], axis=1)
                        cleaned_simplified = simplified.drop_duplicates(subset=['Triple']).copy()
                        simplified_index = cleaned_simplified.reset_index().copy()
                        simplified_index = simplified_index.drop(['index'], axis = 1)

                        simplified_index[['state_category', 'action_category', 'follow_up_state_category']] = pd.DataFrame(simplified_index['Triple'].tolist(), index = simplified_index.index)
                        st.write(simplified_index)

                        csv = convert_df(simplified_index)
                        st.download_button(
                            "Dowload Reward MDP Input",
                            csv,
                            "mdp_rewards.csv",
                            "text/csv",
                            key='rewards-csv'
                        )
                    else:
                        st.warning('A Triple requires exactly 3 columns, namely (state_category, action_category, follow_up_category).')

            else:
                st.markdown('---')
                st.warning('Before we start, you need to feed the algorithm some data!')

        else:
            st.markdown('---')
            st.warning('Before we start, you need to feed the algorithm some data!')

    else:

        # Input Data
        data = pd.read_csv('data/datasets/official/rewards/reward_input.csv').iloc[: , 1:]
        cost_actions = pd.read_csv('data/datasets/official/actions/actions_cost.csv')

        # Visualize Data
        st.markdown('---')
        st.markdown('## Display Input')
        display_data(data)
    
        st.markdown('---')
        st.markdown('## Additional Inputs: Cost of Actions Data & Reward Factor')

        reward_factor = st.slider("Reward Factor", min_value=0.01, 
                                                    max_value = 1.0,
                                                    value = 0.5, 
                                                    help="Default reaward value set to 50%.")

        st.write(cost_actions)

        st.markdown('---')
        c3, c4 = st.columns([2, 1])

        # DELTA CLV & REWARDS
        c3.markdown('## Delta CLV & Reward Calculation')
        state = c3.selectbox("Which column in the data input corresponds to the state column (S)?", data.columns, help = 'Pick the column (State) in your data set!')
        follow_up_state = c3.selectbox("Which column in the data input corresponds to the follow_up_state column (S')", data.columns, help = "Pick the column (State's) in your data set!")

        c4.markdown('## Tipp')
        c4.info("Here it is important that the user chooses the columns regarding the categories of states, actions and follow-up states. Hence, (S,A,S') is a Triple of Categories, (states_category, action_category, follow_up_category), and not the actual (state, actions, follow-up state).")

        data = pd.merge(data, cost_actions, on = 'action', how = 'outer')
        # st.markdown('Action Cost Incurred')
        # st.write(data)
        data['cost'] = data['cost'].astype(float)

        # MDP Form
        data["state_category"] = data["state"].astype('category').cat.codes
        data["state_category"].astype('int')

        data["action_category"] = data["action"].astype('category').cat.codes
        data["action_category"].astype('int')

        data["follow_up_state_category"] = data["follow_up_state"].astype('category').cat.codes
        data["follow_up_state_category"].astype('int')

        tuple_cols_target = c3.multiselect("Select all columns (S,A,S') Category that should be transformed into a single Triple", data.columns, key="tripler_reward", help = "Hint: Here (S,A,S') refers to the categories. E.g. (state_category, action_category, follow_up_state_category)")

        if c3.button('Calculate Rewards & Get MDP Input'):
            data["Delta CLV"] = data[follow_up_state] - data[state]
            data['cost'] = pd.to_numeric(data['cost'])
            data['Reward (state, action, follow_up_state)'] = reward_factor * data["Delta CLV"] - (1 - reward_factor) * data["cost"]
            data = data.sort_values(['state_category', 'action_category', 'follow_up_state_category'])

            if (len(tuple_cols_target) == 3):

                st.write('## MDP Frame Input')
                data['Triple'] = data[tuple_cols_target].apply(tuple, axis = 1)
                simplified = data.filter(['Triple','Reward (state, action, follow_up_state)', 'cost'], axis=1)
                cleaned_simplified = simplified.drop_duplicates(subset=['Triple']).copy()
                simplified_index = cleaned_simplified.reset_index().copy()
                simplified_index = simplified_index.drop(['index'], axis = 1)
                simplified_index[['state_category', 'action_category', 'follow_up_state_category']] = pd.DataFrame(simplified_index['Triple'].tolist(), index = simplified_index.index)

                st.write(data)
                csv = convert_df(simplified_index)
                st.download_button(
                    "Dowload Reward MDP Input",
                    csv,
                    "mdp_rewards.csv",
                    "text/csv",
                    key ='second_reward'
                )
            else:
                st.warning('A Triple requires exactly 3 columns, namely (state_category, action_category, follow_up_category).')

def convert_df(df):
   """convert_df(df) transforms dataframe into .csv file"""
   return df.to_csv().encode('utf-8')

def display_data(data):
    """displays data"""
    st.write(data)